// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique @default(uuid())
  email                  String          @unique
  firstName              String
  lastName               String
  password               String
  profileImg             String?
  accountType            UserRole
  refreshTokens          RefreshToken[]
  socketId               String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  studentClasses         Classes[]       @relation("studentClasses")
  professorClasses       Classes[]       @relation("professorClasses")
  submissions            Submission[]    @relation("studentSubmission")
  receiverNotifications  Notification[]  @relation("receiverNotifications")
  creatorNotifications   Notification[]  @relation("creatorNotifications")
  senderChats            Chat[]          @relation("senderChats")
  classChatParticipant   ClassChat[]     @relation("ClassChatParticipants")
}

enum UserRole {
  Student
  Professor
}

model RefreshToken {
  id           String    @id @unique @default(uuid())
  hashedToken  String    @unique
  userId       String
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expireAt     DateTime
}

model Classes {
  id                 String           @id @unique @default(uuid())
  classCode          String           @unique
  sectionId          String           @unique
  className          String 
  startTimes         DateTime[] 
  endTimes           DateTime[] 
  professorId        String 
  professor          User             @relation("professorClasses", fields: [professorId], references: [id])
  students           User[]           @relation("studentClasses")
  rootFile           FileSystemItem?  @relation("classRootFile")
  assignments        Assignment[]     @relation("classAssignments")
  notifications      Notification[]   @relation("classNotifications")
  classAnnoucements  Announcement[]   @relation("classAnnoucements")
  classChat          ClassChat?       @relation("classChat")
}

enum FileType {
  File
  Folder
}

model FileSystemItem {
  id        String            @id @unique @default(uuid())
  name      String
  type      FileType
  classId   String?           @unique
  class     Classes?          @relation("classRootFile", fields: [classId], references: [id])
  parentId  String?
  parent    FileSystemItem?   @relation("FileToFile", fields: [parentId], references: [id])
  fileURL   String?
  createdAt DateTime          @default(now())
  children  FileSystemItem[]  @relation("FileToFile")
}

model Assignment {
  id           String        @id @unique @default(uuid())
  classId      String
  class        Classes       @relation("classAssignments", fields: [classId], references: [id])
  name         String 
  description  String
  dueDate      DateTime
  files        String[]
  createdAt    DateTime      @default(now())
  submissions  Submission[]  @relation("assignmentSubmissions")
}

model Submission {
  id              String      @id @unique @default(uuid())
  assignmentId    String
  assignment      Assignment  @relation("assignmentSubmissions", fields: [assignmentId], references: [id])
  studentId       String
  student         User        @relation("studentSubmission", fields: [studentId], references: [id])
  submitted       Boolean
  submissionTime  DateTime?
  uploadedFiles   String[]
  createdAt       DateTime    @default(now())
  @@unique([assignmentId, studentId])
}

model Notification {
  id           String            @id @default(uuid())
  classId      String
  class        Classes           @relation("classNotifications", fields: [classId], references: [id])
  creatorId    String
  creator      User              @relation("creatorNotifications", fields: [creatorId], references: [id])
  receiverId   String 
  receiver     User              @relation("receiverNotifications", fields: [receiverId], references: [id])
  type         NotificationType
  data         Json     
  read         Boolean           @default(false)
  urgent       Boolean           @default(false)
  createdAt    DateTime          @default(now())
  readAt       DateTime?
}

model Announcement {
  id           String    @id @unique @default(uuid())
  classId      String
  class        Classes   @relation("classAnnoucements", fields: [classId], references: [id])
  name         String
  description  String
  createdAt    DateTime  @default(now())
}

enum NotificationType {
  AssignmentPosted
  StudentSubmission
  FileSystemItemCreated
  AnnouncementPosted
}

enum CommandCategory {
  PostAnnoucement
  ViewAnnouncement
  ViewStudentSubmission
  ViewAssignment
  ViewFileSystemItem
  PingUser
}

model ClassChat {
  id           String    @id @unique @default(uuid())
  classId      String    @unique
  class        Classes   @relation("classChat", fields: [classId], references: [id])
  participants User[]    @relation("ClassChatParticipants")
  chats        Chat[]    @relation("ClassChatMessages")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Chat {
  id               String      @id @unique @default(uuid())
  classChatId      String
  classChat        ClassChat   @relation("ClassChatMessages", fields: [classChatId], references: [id], onDelete: Cascade)
  senderId         String
  sender           User        @relation("senderChats", fields: [senderId], references: [id])
  command          Boolean     @default(false)
  content          String?
  commandResponse  Json?
  createdAt        DateTime    @default(now())
}